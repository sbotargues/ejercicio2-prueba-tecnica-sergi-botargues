{"ast":null,"code":"var _jsxFileName = \"/Users/sergi/Desktop/Ejercicio 2/googleMaps/src/components/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      this.setState({\n        address\n      });\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n        console.log('Success', latLng); // update center state\n\n        this.setState({\n          mapCenter: latLng\n        });\n      }).catch(error => console.error('Error', error));\n    };\n\n    this.state = {\n      // for google map places autocomplete\n      address: '',\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      mapCenter: {\n        lat: 41.1333,\n        lng: 1.3833\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"googleMaps\",\n      children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: this.state.address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 29\n              }, this), suggestions.map(suggestion => {\n                const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n                const style = suggestion.active ? {\n                  backgroundColor: '#fafafa',\n                  cursor: 'pointer'\n                } : {\n                  backgroundColor: '#ffffff',\n                  cursor: 'pointer'\n                };\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    className,\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 21\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        google: this.props.google,\n        initialCenter: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        center: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_KEY\n})(MapContainer);","map":{"version":3,"sources":["/Users/sergi/Desktop/Ejercicio 2/googleMaps/src/components/GoogleMap.js"],"names":["React","Component","Map","Marker","GoogleApiWrapper","PlacesAutocomplete","geocodeByAddress","getLatLng","MapContainer","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","mapCenter","catch","error","state","showingInfoWindow","activeMarker","selectedPlace","lat","lng","render","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","google","apiKey","process","env","REACT_APP_GOOGLE_KEY"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // for google map places autocomplete\n      address: '',\n\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n  \n      mapCenter: {\n        lat: 41.1333,\n        lng: 1.3833\n      }\n    };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        console.log('Success', latLng);\n\n        // update center state\n        this.setState({ mapCenter: latLng });\n      })\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n    return (\n      <div id='googleMaps'>\n        <PlacesAutocomplete\n          value={this.state.address}\n          onChange={this.handleChange}\n          onSelect={this.handleSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Search Places ...',\n                  className: 'location-search-input',\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map(suggestion => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n\n        <Map \n          google={this.props.google}\n          initialCenter={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n          center={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n        >\n          <Marker \n            position={{\n              lat: this.state.mapCenter.lat,\n              lng: this.state.mapCenter.lng\n            }} />\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (process.env.REACT_APP_GOOGLE_KEY)\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}